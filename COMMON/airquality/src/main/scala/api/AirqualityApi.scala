/**
 * Umweltbundesamt Air Data API
 * Air data API of Umweltbundesamt
 *
 * OpenAPI spec version: 2.0.1
 * Contact: immission@uba.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package api

import java.text.SimpleDateFormat
import model.InlineResponse200
import model.InlineResponse2001
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType
import java.io.File
import java.util.Date
import java.util.TimeZone
import scala.collection.mutable.HashMap
import com.wordnik.swagger.client._

import scala.concurrent.Future
import collection.mutable
import java.net.URI
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}
import org.json4s._


class AirqualityApi(
  val defBasePath: String = "https://www.umweltbundesamt.de/api/air_data/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AirqualityApiAsyncHelper(client, config)

  /**
   * Get airquality data
   * This entry point returns airquality data for the provided parameters.
   *
   * @param dateFrom A date 
   * @param timeFrom An hour. 
   * @param dateTo A date 
   * @param timeTo An hour. 
   * @param station Id of station (optional)
   * @return inline_response_200
   */
  def airqualityJsonGet(dateFrom: String, timeFrom: Integer, dateTo: String, timeTo: Integer, station: Option[Integer] = None): Option[inline_response_200] = {
    val await = Try(Await.result(airqualityJsonGetAsync(dateFrom, timeFrom, dateTo, timeTo, station), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get airquality data asynchronously
   * This entry point returns airquality data for the provided parameters.
   *
   * @param dateFrom A date 
   * @param timeFrom An hour. 
   * @param dateTo A date 
   * @param timeTo An hour. 
   * @param station Id of station (optional)
   * @return Future(inline_response_200)
   */
  def airqualityJsonGetAsync(dateFrom: String, timeFrom: Integer, dateTo: String, timeTo: Integer, station: Option[Integer] = None): Future[inline_response_200] = {
      helper.airqualityJsonGet(dateFrom, timeFrom, dateTo, timeTo, station)
  }

  /**
   * Get airquality date limits
   * This entry point returns the date limits of airquality stations.
   *
   * @return inline_response_200_1
   */
  def airqualityLimitsGet(): Option[inline_response_200_1] = {
    val await = Try(Await.result(airqualityLimitsGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get airquality date limits asynchronously
   * This entry point returns the date limits of airquality stations.
   *
   * @return Future(inline_response_200_1)
   */
  def airqualityLimitsGetAsync(): Future[inline_response_200_1] = {
      helper.airqualityLimitsGet()
  }

}

class AirqualityApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def airqualityJsonGet(dateFrom: String,
    timeFrom: Integer,
    dateTo: String,
    timeTo: Integer,
    station: Option[Integer] = None
    )(implicit reader: ClientResponseReader[inline_response_200]): Future[inline_response_200] = {
    // create path and map variables
    val path = (addFmt("/airquality/json"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (dateFrom == null) throw new Exception("Missing required parameter 'dateFrom' when calling AirqualityApi->airqualityJsonGet")

    if (dateTo == null) throw new Exception("Missing required parameter 'dateTo' when calling AirqualityApi->airqualityJsonGet")

    queryParams += "date_from" -> dateFrom.toString
    queryParams += "time_from" -> timeFrom.toString
    queryParams += "date_to" -> dateTo.toString
    queryParams += "time_to" -> timeTo.toString
    station match {
      case Some(param) => queryParams += "station" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def airqualityLimitsGet()(implicit reader: ClientResponseReader[inline_response_200_1]): Future[inline_response_200_1] = {
    // create path and map variables
    val path = (addFmt("/airquality/limits"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
