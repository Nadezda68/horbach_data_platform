/**
 * Umweltbundesamt Air Data API
 * Air data API of Umweltbundesamt
 *
 * OpenAPI spec version: 2.0.1
 * Contact: immission@uba.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package api

import java.text.SimpleDateFormat
import io.swagger.client.model.inline_response_200_2
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType
import java.io.File
import java.util.Date
import java.util.TimeZone
import scala.collection.mutable.HashMap
import com.wordnik.swagger.client._

import scala.concurrent.Future
import collection.mutable
import java.net.URI
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}
import org.json4s._

class AnnualtabulationApi(
  val defBasePath: String = "https://www.umweltbundesamt.de/api/air_data/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new AnnualtabulationApiAsyncHelper(client, config)

  /**
   * Get annualtabulation
   * This entry point returns the data of annual tabulations
   *
   * @param component Id of component 
   * @param year A 4-digit Year 
   * @param lang The language code (optional, default to en)
   * @return inline_response_200_2
   */
  def annualbalancesJsonGet(component: Integer, year: String, lang: Option[String] = Option("en")): Option[inline_response_200_2] = {
    val await = Try(Await.result(annualbalancesJsonGetAsync(component, year, lang), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get annualtabulation asynchronously
   * This entry point returns the data of annual tabulations
   *
   * @param component Id of component 
   * @param year A 4-digit Year 
   * @param lang The language code (optional, default to en)
   * @return Future(inline_response_200_2)
   */
  def annualbalancesJsonGetAsync(component: Integer, year: String, lang: Option[String] = Option("en")): Future[inline_response_200_2] = {
      helper.annualbalancesJsonGet(component, year, lang)
  }

}

class AnnualtabulationApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def annualbalancesJsonGet(component: Integer,
    year: String,
    lang: Option[String] = Option("en")
    )(implicit reader: ClientResponseReader[inline_response_200_2]): Future[inline_response_200_2] = {
    // create path and map variables
    val path = (addFmt("/annualbalances/json"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (year == null) throw new Exception("Missing required parameter 'year' when calling AnnualtabulationApi->annualbalancesJsonGet")

    queryParams += "component" -> component.toString
    queryParams += "year" -> year.toString
    lang match {
      case Some(param) => queryParams += "lang" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
